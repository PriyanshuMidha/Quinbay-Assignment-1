
import java.util.*;

public class Solution {

    public static boolean canWin(int leap, int[] game) {
        // We call the helper function `isSolvable` starting from index 0.
        return isSolvable(leap, game, 0, new boolean[game.length]);
    }

    private static boolean isSolvable(int leap, int[] game, int i, boolean[] visited) {
        // Winning condition: if we're beyond the last index, we win
        if (i >= game.length) {
            return true;
        }

        // Base conditions:
        // If i is out of bounds, the cell is `1` (blocked), or already visited, return false
        if (i < 0 || game[i] == 1 || visited[i]) {
            return false;
        }

        // Mark this index as visited to avoid cycles
        visited[i] = true;

        // Recursive exploration of possible moves:
        // 1. Move forward by 1
        // 2. Jump by `leap`
        // 3. Move backward by 1 (only if it's not already visited)
        return isSolvable(leap, game, i + 1, visited) ||     // Move forward
               isSolvable(leap, game, i + leap, visited) ||  // Jump
               isSolvable(leap, game, i - 1, visited);       // Move backward
    }

    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int q = scan.nextInt();
        while (q-- > 0) {
            int n = scan.nextInt();
            int leap = scan.nextInt();
            
            int[] game = new int[n];
            for (int i = 0; i < n; i++) {
                game[i] = scan.nextInt();
            }

            System.out.println( (canWin(leap, game)) ? "YES" : "NO" );
        }
        scan.close();
    }
}
